generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id Int @id @default(autoincrement())

    name String
    email String @unique
    avatar String
    status String

    password String

    createdAlbums  Album[]
    followedAlbums Album[] @relation("album-follower")

    createdPosts  Post[]
    followedPosts Post[] @relation("post-follower")

    friendUsers User[] @relation("friends")
    friendOf    User[] @relation("friends")

    chats ChatRoom[] @relation("participants")

    messages Message[]

    comments Comment[]
    
    created_at DateTime? @default(now())
    deletedAt DateTime?
}

model ChatRoom {
    id Int @id @default(autoincrement())

    participants User[] @relation("participants")

    messages Message[]

    created_at DateTime? @default(now())
    deletedAt DateTime?
}

model Post {
    id      Int    @id @default(autoincrement())
    content String

    creatorId Int
    creator User @relation(fields: [creatorId], references: [id])
    
    followedPosts User[] @relation("post-follower")

    comments Comment[]

    created_at DateTime? @default(now())
    deletedAt DateTime?
}

model Comment {
    id   Int    @id @default(autoincrement())
    content String

    post   Post @relation(fields: [postId], references: [id])
    postId Int

    author   User @relation(fields: [authorId], references: [id])
    authorId Int
    
    deletedAt DateTime?
}

model Album {
    id   Int    @id @default(autoincrement())
    name String @unique
    image String

    creatorId Int
    creator User @relation(fields: [creatorId], references: [id])
    followedAlbums User[] @relation("album-follower")

    songs Song[]

    created_at DateTime? @default(now())
    deletedAt DateTime?
}

model Song {
    id Int @id @default(autoincrement())
    name String

    album   Album @relation(fields: [albumId], references: [id])
    albumId Int

    sourse String
    
    created_at DateTime? @default(now())
    deletedAt DateTime?
}

model Message {
    id      Int    @id @default(autoincrement())
    content String

    sender   User @relation(fields: [senderId], references: [id])
    senderId Int

    chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
    chatRoomId Int

    created_at DateTime? @default(now())
    deletedAt DateTime?
}
